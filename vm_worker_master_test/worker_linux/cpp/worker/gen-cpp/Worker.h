/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Worker_H
#define Worker_H

#include <TProcessor.h>
#include "worker_types.h"



class WorkerIf {
 public:
  virtual ~WorkerIf() {}
  virtual bool test() = 0;
  virtual bool test_worker() = 0;
  virtual bool start_app() = 0;
  virtual bool query_app() = 0;
};

class WorkerIfFactory {
 public:
  typedef WorkerIf Handler;

  virtual ~WorkerIfFactory() {}

  virtual WorkerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WorkerIf* /* handler */) = 0;
};

class WorkerIfSingletonFactory : virtual public WorkerIfFactory {
 public:
  WorkerIfSingletonFactory(const boost::shared_ptr<WorkerIf>& iface) : iface_(iface) {}
  virtual ~WorkerIfSingletonFactory() {}

  virtual WorkerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WorkerIf* /* handler */) {}

 protected:
  boost::shared_ptr<WorkerIf> iface_;
};

class WorkerNull : virtual public WorkerIf {
 public:
  virtual ~WorkerNull() {}
  bool test() {
    bool _return = false;
    return _return;
  }
  bool test_worker() {
    bool _return = false;
    return _return;
  }
  bool start_app() {
    bool _return = false;
    return _return;
  }
  bool query_app() {
    bool _return = false;
    return _return;
  }
};


class Worker_test_args {
 public:

  Worker_test_args() {
  }

  virtual ~Worker_test_args() throw() {}


  bool operator == (const Worker_test_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_test_pargs {
 public:


  virtual ~Worker_test_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_test_result__isset {
  _Worker_test_result__isset() : success(false) {}
  bool success;
} _Worker_test_result__isset;

class Worker_test_result {
 public:

  Worker_test_result() : success(0) {
  }

  virtual ~Worker_test_result() throw() {}

  bool success;

  _Worker_test_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Worker_test_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_test_presult__isset {
  _Worker_test_presult__isset() : success(false) {}
  bool success;
} _Worker_test_presult__isset;

class Worker_test_presult {
 public:


  virtual ~Worker_test_presult() throw() {}

  bool* success;

  _Worker_test_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Worker_test_worker_args {
 public:

  Worker_test_worker_args() {
  }

  virtual ~Worker_test_worker_args() throw() {}


  bool operator == (const Worker_test_worker_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_test_worker_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_test_worker_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_test_worker_pargs {
 public:


  virtual ~Worker_test_worker_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_test_worker_result__isset {
  _Worker_test_worker_result__isset() : success(false) {}
  bool success;
} _Worker_test_worker_result__isset;

class Worker_test_worker_result {
 public:

  Worker_test_worker_result() : success(0) {
  }

  virtual ~Worker_test_worker_result() throw() {}

  bool success;

  _Worker_test_worker_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Worker_test_worker_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_test_worker_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_test_worker_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_test_worker_presult__isset {
  _Worker_test_worker_presult__isset() : success(false) {}
  bool success;
} _Worker_test_worker_presult__isset;

class Worker_test_worker_presult {
 public:


  virtual ~Worker_test_worker_presult() throw() {}

  bool* success;

  _Worker_test_worker_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Worker_start_app_args {
 public:

  Worker_start_app_args() {
  }

  virtual ~Worker_start_app_args() throw() {}


  bool operator == (const Worker_start_app_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_start_app_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_start_app_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_start_app_pargs {
 public:


  virtual ~Worker_start_app_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_start_app_result__isset {
  _Worker_start_app_result__isset() : success(false) {}
  bool success;
} _Worker_start_app_result__isset;

class Worker_start_app_result {
 public:

  Worker_start_app_result() : success(0) {
  }

  virtual ~Worker_start_app_result() throw() {}

  bool success;

  _Worker_start_app_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Worker_start_app_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_start_app_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_start_app_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_start_app_presult__isset {
  _Worker_start_app_presult__isset() : success(false) {}
  bool success;
} _Worker_start_app_presult__isset;

class Worker_start_app_presult {
 public:


  virtual ~Worker_start_app_presult() throw() {}

  bool* success;

  _Worker_start_app_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Worker_query_app_args {
 public:

  Worker_query_app_args() {
  }

  virtual ~Worker_query_app_args() throw() {}


  bool operator == (const Worker_query_app_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_query_app_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_query_app_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_query_app_pargs {
 public:


  virtual ~Worker_query_app_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_query_app_result__isset {
  _Worker_query_app_result__isset() : success(false) {}
  bool success;
} _Worker_query_app_result__isset;

class Worker_query_app_result {
 public:

  Worker_query_app_result() : success(0) {
  }

  virtual ~Worker_query_app_result() throw() {}

  bool success;

  _Worker_query_app_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Worker_query_app_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_query_app_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_query_app_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_query_app_presult__isset {
  _Worker_query_app_presult__isset() : success(false) {}
  bool success;
} _Worker_query_app_presult__isset;

class Worker_query_app_presult {
 public:


  virtual ~Worker_query_app_presult() throw() {}

  bool* success;

  _Worker_query_app_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WorkerClient : virtual public WorkerIf {
 public:
  WorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool test();
  void send_test();
  bool recv_test();
  bool test_worker();
  void send_test_worker();
  bool recv_test_worker();
  bool start_app();
  void send_start_app();
  bool recv_start_app();
  bool query_app();
  void send_query_app();
  bool recv_query_app();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WorkerProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<WorkerIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (WorkerProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_test(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_test_worker(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_app(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_app(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WorkerProcessor(boost::shared_ptr<WorkerIf> iface) :
    iface_(iface) {
    processMap_["test"] = &WorkerProcessor::process_test;
    processMap_["test_worker"] = &WorkerProcessor::process_test_worker;
    processMap_["start_app"] = &WorkerProcessor::process_start_app;
    processMap_["query_app"] = &WorkerProcessor::process_query_app;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~WorkerProcessor() {}
};

class WorkerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WorkerProcessorFactory(const ::boost::shared_ptr< WorkerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WorkerIfFactory > handlerFactory_;
};

class WorkerMultiface : virtual public WorkerIf {
 public:
  WorkerMultiface(std::vector<boost::shared_ptr<WorkerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WorkerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WorkerIf> > ifaces_;
  WorkerMultiface() {}
  void add(boost::shared_ptr<WorkerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool test() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->test();
      } else {
        ifaces_[i]->test();
      }
    }
  }

  bool test_worker() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->test_worker();
      } else {
        ifaces_[i]->test_worker();
      }
    }
  }

  bool start_app() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->start_app();
      } else {
        ifaces_[i]->start_app();
      }
    }
  }

  bool query_app() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->query_app();
      } else {
        ifaces_[i]->query_app();
      }
    }
  }

};



#endif
