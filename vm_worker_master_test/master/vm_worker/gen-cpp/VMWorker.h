/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VMWorker_H
#define VMWorker_H

#include <TProcessor.h>
#include "vm_worker_types.h"



class VMWorkerIf {
 public:
  virtual ~VMWorkerIf() {}
  virtual bool test() = 0;
  virtual bool start_app() = 0;
  virtual bool query_app() = 0;
};

class VMWorkerIfFactory {
 public:
  typedef VMWorkerIf Handler;

  virtual ~VMWorkerIfFactory() {}

  virtual VMWorkerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VMWorkerIf* /* handler */) = 0;
};

class VMWorkerIfSingletonFactory : virtual public VMWorkerIfFactory {
 public:
  VMWorkerIfSingletonFactory(const boost::shared_ptr<VMWorkerIf>& iface) : iface_(iface) {}
  virtual ~VMWorkerIfSingletonFactory() {}

  virtual VMWorkerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VMWorkerIf* /* handler */) {}

 protected:
  boost::shared_ptr<VMWorkerIf> iface_;
};

class VMWorkerNull : virtual public VMWorkerIf {
 public:
  virtual ~VMWorkerNull() {}
  bool test() {
    bool _return = false;
    return _return;
  }
  bool start_app() {
    bool _return = false;
    return _return;
  }
  bool query_app() {
    bool _return = false;
    return _return;
  }
};


class VMWorker_test_args {
 public:

  VMWorker_test_args() {
  }

  virtual ~VMWorker_test_args() throw() {}


  bool operator == (const VMWorker_test_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VMWorker_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VMWorker_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VMWorker_test_pargs {
 public:


  virtual ~VMWorker_test_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VMWorker_test_result__isset {
  _VMWorker_test_result__isset() : success(false) {}
  bool success;
} _VMWorker_test_result__isset;

class VMWorker_test_result {
 public:

  VMWorker_test_result() : success(0) {
  }

  virtual ~VMWorker_test_result() throw() {}

  bool success;

  _VMWorker_test_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const VMWorker_test_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VMWorker_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VMWorker_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VMWorker_test_presult__isset {
  _VMWorker_test_presult__isset() : success(false) {}
  bool success;
} _VMWorker_test_presult__isset;

class VMWorker_test_presult {
 public:


  virtual ~VMWorker_test_presult() throw() {}

  bool* success;

  _VMWorker_test_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VMWorker_start_app_args {
 public:

  VMWorker_start_app_args() {
  }

  virtual ~VMWorker_start_app_args() throw() {}


  bool operator == (const VMWorker_start_app_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VMWorker_start_app_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VMWorker_start_app_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VMWorker_start_app_pargs {
 public:


  virtual ~VMWorker_start_app_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VMWorker_start_app_result__isset {
  _VMWorker_start_app_result__isset() : success(false) {}
  bool success;
} _VMWorker_start_app_result__isset;

class VMWorker_start_app_result {
 public:

  VMWorker_start_app_result() : success(0) {
  }

  virtual ~VMWorker_start_app_result() throw() {}

  bool success;

  _VMWorker_start_app_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const VMWorker_start_app_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VMWorker_start_app_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VMWorker_start_app_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VMWorker_start_app_presult__isset {
  _VMWorker_start_app_presult__isset() : success(false) {}
  bool success;
} _VMWorker_start_app_presult__isset;

class VMWorker_start_app_presult {
 public:


  virtual ~VMWorker_start_app_presult() throw() {}

  bool* success;

  _VMWorker_start_app_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VMWorker_query_app_args {
 public:

  VMWorker_query_app_args() {
  }

  virtual ~VMWorker_query_app_args() throw() {}


  bool operator == (const VMWorker_query_app_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VMWorker_query_app_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VMWorker_query_app_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VMWorker_query_app_pargs {
 public:


  virtual ~VMWorker_query_app_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VMWorker_query_app_result__isset {
  _VMWorker_query_app_result__isset() : success(false) {}
  bool success;
} _VMWorker_query_app_result__isset;

class VMWorker_query_app_result {
 public:

  VMWorker_query_app_result() : success(0) {
  }

  virtual ~VMWorker_query_app_result() throw() {}

  bool success;

  _VMWorker_query_app_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const VMWorker_query_app_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VMWorker_query_app_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VMWorker_query_app_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VMWorker_query_app_presult__isset {
  _VMWorker_query_app_presult__isset() : success(false) {}
  bool success;
} _VMWorker_query_app_presult__isset;

class VMWorker_query_app_presult {
 public:


  virtual ~VMWorker_query_app_presult() throw() {}

  bool* success;

  _VMWorker_query_app_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VMWorkerClient : virtual public VMWorkerIf {
 public:
  VMWorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  VMWorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool test();
  void send_test();
  bool recv_test();
  bool start_app();
  void send_start_app();
  bool recv_start_app();
  bool query_app();
  void send_query_app();
  bool recv_query_app();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VMWorkerProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<VMWorkerIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (VMWorkerProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_test(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_app(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_app(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VMWorkerProcessor(boost::shared_ptr<VMWorkerIf> iface) :
    iface_(iface) {
    processMap_["test"] = &VMWorkerProcessor::process_test;
    processMap_["start_app"] = &VMWorkerProcessor::process_start_app;
    processMap_["query_app"] = &VMWorkerProcessor::process_query_app;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~VMWorkerProcessor() {}
};

class VMWorkerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VMWorkerProcessorFactory(const ::boost::shared_ptr< VMWorkerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VMWorkerIfFactory > handlerFactory_;
};

class VMWorkerMultiface : virtual public VMWorkerIf {
 public:
  VMWorkerMultiface(std::vector<boost::shared_ptr<VMWorkerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VMWorkerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VMWorkerIf> > ifaces_;
  VMWorkerMultiface() {}
  void add(boost::shared_ptr<VMWorkerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool test() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->test();
      } else {
        ifaces_[i]->test();
      }
    }
  }

  bool start_app() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->start_app();
      } else {
        ifaces_[i]->start_app();
      }
    }
  }

  bool query_app() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->query_app();
      } else {
        ifaces_[i]->query_app();
      }
    }
  }

};



#endif
